{"version":3,"sources":["components/misc/proxyURL.js","components/lin-reg/points.js","components/lin-reg/addPointForm.js","components/lin-reg/linRegChart.js","components/lin-reg/linReg.js","components/svm/svmChart.js","components/svm/svmSlider.js","components/svm/points.js","components/svm/addPointForm.js","components/svm/svm.js","components/kmeans/points.js","components/kmeans/addPointForm.js","components/kmeans/kmeansChart.js","components/kmeans/kmeansSlider.js","components/kmeans/kmeans.js","components/lda/gaussians.js","components/lda/addGaussianForm.js","components/lda/ldaChart.js","components/lda/lda.js","components/navbar/navbar.js","components/home/homePage.js","components/history/history.js","App.js","serviceWorker.js","index.js"],"names":["PROXY_URL","Points","props","state","points","toggle","deletePoint","prevProps","this","setState","className","List","map","point","i","Item","key","x","y","onClick","_","Icon","name","Component","validNumber","str","trimmed","trim","length","isFinite","getMetadata","a","async","push","fetch","method","headers","body","JSON","stringify","response","json","metadata","AddPointForm","xStatus","yStatus","onNewPoint","updateMetadata","then","Form","Field","Input","placeholder","value","onChange","e","target","primary","disabled","Number","properMinScaling","n","properMaxScaling","LinRegressChart","width","height","radius","color","margin","left","right","top","bottom","drawWidth","drawHeight","update","allPoints","concat","bestFitLine","xMin","d3","d","xMax","yMin","yMax","xScale","domain","range","yScale","circles","chartArea","selectAll","data","enter","append","merge","attr","label","transition","duration","exit","remove","line","curve","xAxisFunction","scale","ticks","yAxisFunction","xAxis","call","yAxis","updateScales","updateAxes","updatePoints","updateLine","ref","node","transform","LinReg","testSplit","res","m","b","residual","preventDefault","console","log","axios","url","status","event","Header","size","newMetadata","filter","idx","Grid","style","marginTop","container","spacing","item","xs","display","flexDirection","alignItems","onSubmit","handleSubmit","bind","Button","type","variant","TextField","id","InputLabelProps","shrink","defaultValue","required","onTestSplitChange","SVMChart","boundaryLine","upperLine","lowerLine","svmLines","colors","updateLines","SVMSlider","c","min","max","updateC","step","options","text","labels","Dropdown","fluid","selection","newPoint","SVM","penalty","cValue","accuracy","newC","FormControl","component","FormLabel","RadioGroup","aria-label","onPenaltyChange","FormControlLabel","default","control","Radio","onCValueChange","k","updateData","newData","KMeansChart","centroids","r","KMeansSlider","maxColors","updateK","KMeans","kvalue","outputData","newK","onKValueChange","Gaussians","means","covMats","deletePair","meanVec","math","covarianceMatrices","AddGaussianForm","varX","varY","covXY","onNewInput","class","newX","newY","newVarX","newVarY","newCovXY","newMean","newCovMat","LDAChart","ldaLine","LDA","meanVector","covMat","useStyles","makeStyles","theme","root","flexGrow","justifyContent","menuButton","marginRight","button","formControl","minWidth","NavBar","classes","history","useHistory","pushLink","link","AppBar","position","Toolbar","Typography","HomePage","uploadFile","ev","FormData","uploadInput","files","accept","single","valud","React","App","Fragment","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a0d11b1.chunk.js","sourcesContent":["export const PROXY_URL = \"https://ess-ml-dashboard.herokuapp.com\";","import React, {Component} from 'react';\nimport {List, Button, Icon} from 'semantic-ui-react';\nimport './points.css';\n\nexport class Points extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            points: this.props.points,\n            toggle: this.props.toggle,\n            deletePoint: this.props.deletePoint\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.toggle !== this.props.toggle) {\n            this.setState(this.props);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"lin-reg__points\">\n                <h2><u>Points</u>:</h2>\n                <div className=\"lin-reg__points-list\">\n                    <List>\n                    {this.state.points.map((point, i) => {\n                        return (\n                            <List.Item key={i}>\n                                <header className='point-row'>\n                                    <span className='point-row__point'>\n                                        ({point.x}, {point.y})\n                                    </span>\n                                    <Button className='point-row__delete'\n                                        onClick={_ => {\n                                            this.state.deletePoint(i);\n                                        }\n                                    }>\n                                        <Icon name='close' />\n                                    </Button>\n                                </header>\n                            </List.Item>\n                        );\n                    })}\n                    </List>\n                </div>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport {Form, Input, Button} from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport './addPointForm.css';\n\nfunction validNumber(str) {\n    let trimmed = str.trim();\n    return trimmed.length > 0 && isFinite(trimmed);\n};\n\nasync function getMetadata(points) {\n    const x = [];\n    const y = [];\n    points.map(point => {\n        x.push(point.x);\n        y.push(point.y);\n    });\n    \n    const response = await fetch(PROXY_URL + '/pointtest/lin_regress', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            'x': x,\n            'y': y\n        })\n    });\n\n    const metadata = await response.json();\n    return metadata;\n}\n\nexport class AddPointForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: '',\n            y: '',\n            xStatus: '',\n            yStatus: '',\n            onNewPoint: this.props.onNewPoint,\n            updateMetadata: this.props.updateMetadata,\n            points: this.props.points\n        };\n    };\n\n    async componentDidUpdate(prevProps) {\n        if (prevProps.points.length !== this.props.points.length) {\n            this.setState({\n                points: this.props.points\n            });\n\n            const promise = getMetadata(this.props.points);\n            promise.then(metadata => this.state.updateMetadata(metadata));\n        }\n    };\n\n    render() {\n        return (\n            <div className='lin-regress__form'>\n                <h2><u>Input Point</u>:</h2>\n                <Form className='xy-form'>\n                    <header className=\"xy-form__row\">\n                        <Form.Field>\n                            <Input  className=\"xy-form__row__input\"\n                                    placeholder='X-Coordinate'\n                                    value={this.state.x}\n                                    onChange={e => {\n                                        this.setState({x: e.target.value});\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\n                                            this.setState({xStatus: ''});\n                                        else\n                                            this.setState({xStatus: 'Not a number!'});\n                                    }}\n                            />\n                            <span className='xy-form__row__span'>{this.state.xStatus}</span>\n                        </Form.Field>\n                    </header>\n                    <header className=\"xy-form__row\">\n                        <Form.Field>\n                            <Input  className=\"xy-form__row__input\"\n                                    placeholder='Y-Coordinate'\n                                    value={this.state.y}\n                                    onChange={e => {\n                                        this.setState({y: e.target.value});\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\n                                            this.setState({yStatus: ''});\n                                        else\n                                            this.setState({yStatus: 'Not a number!'});\n                                    }}\n                            />\n                            <span className=\"xy-form__row__span\">{this.state.yStatus}</span>\n                        </Form.Field>\n                    </header>\n                    <Button primary\n                            className=\"add-point\"\n                            disabled={!(validNumber(this.state.x) && validNumber(this.state.y))}\n                            onClick={async () => {\n                                this.state.onNewPoint({x: Number(this.state.x), y: Number(this.state.y)});\n                                this.setState({\n                                    x: '',\n                                    y: '',\n                                    xStatus: '',\n                                    yStatus: ''\n                                });\n                            }\n                    }>\n                        Add Point\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\n\nfunction properMinScaling(n) {\n    if (n >= 0)\n        return n * 0.9;\n    else\n        return n * 1.1;\n}\n\nfunction properMaxScaling(n) {\n    if (n >= 0)\n        return n * 1.1;\n    else\n        return n * 0.9;\n}\n\nexport class LinRegressChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 400,\n            radius: 5,\n            color: '#FF0000',\n            margin: {\n                left: 50,\n                right: 10,\n                top: 20,\n                bottom: 50\n            }\n        };\n\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\n    };\n\n    componentDidMount() {\n        this.update();\n    }\n\n    componentDidUpdate() {\n        this.update();\n    };\n\n    updateScales() {\n        const allPoints = this.props.points\n            .concat(this.props.bestFitLine);\n        \n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\n\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\n    }\n    \n    updatePoints() {\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\n\n        circles.enter().append('circle')\n            .merge(circles)\n            .attr('r', (d) => this.state.radius)\n            .attr('fill', this.state.color)\n            .attr('label', (d) => d.label)\n            .transition().duration(500)\n            .attr('cx', (d) => this.xScale(d.x))\n            .attr('cy', (d) => this.yScale(d.y))\n\n        circles.exit().remove();\n    }\n\n    updateLine() {\n        const line = d3.line()\n            .x((d) => this.xScale(+d.x))\n            .y((d) => this.yScale(+d.y))\n            .curve(d3.curveMonotoneX);\n\n        let bestFitLine = d3.select(this.chartArea)\n            .selectAll('.lin-reg__chart__best-fit-line')\n            .data([this.props.bestFitLine]);\n        \n        bestFitLine.enter().append('path')\n            .merge(bestFitLine)\n            .attr('class', 'lin-reg__chart__best-fit-line')\n            .attr('fill', 'none')\n            .attr('stroke', '#000000')\n            .attr('stroke-width', 3)\n            .transition().duration(500)\n            .attr('d', (d) => line(d))\n    }\n    \n    updateAxes() {\n        let xAxisFunction = d3.axisBottom()\n            .scale(this.xScale)\n            .ticks(5, 's');\n\n        let yAxisFunction = d3.axisLeft()\n            .scale(this.yScale)\n            .ticks(5, 's');\n\n        d3.select(this.xAxis)\n            .call(xAxisFunction);\n\n        d3.select(this.yAxis)\n            .call(yAxisFunction);\n    }\n    \n    update() {\n        this.updateScales();\n        this.updateAxes();\n        this.updatePoints();\n        this.updateLine();\n    }\n\n    render() {\n        return (\n            <div className=\"lin-reg__chart\">\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\n                    <g ref={(node) => { this.chartArea = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\n\n                    {/* Axes */}\n                    <g ref={(node) => { this.xAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\n                    <g ref={(node) => { this.yAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\n                </svg>\n            </div>\n\n        )\n    }\n};","import React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { PROXY_URL } from '../misc/proxyURL';\nimport TextField from '@material-ui/core/TextField';\nimport {Points} from './points'\nimport {AddPointForm} from './addPointForm';\nimport {LinRegressChart} from './linRegChart';\nimport axios from 'axios';\nimport './linReg.css';\n\nexport class LinReg extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            testSplit: 0.2,\n            points: [{x: 1, y: 2}, {x: 2, y: 1}, {x: 3, y: 4}],\n            res: [],\n            metadata: {\n                bestFitLine: [{x: 1, y: 1.33}, {x: 3, y: 3.33}],\n                m: 1,\n                b: 0.33,\n                residual: 2.67\n            },\n            toggle: 0\n        };\n    };\n\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(this.state.testSplit);\n\n        axios({\n            method: \"POST\",\n            url: PROXY_URL + \"/train/lr\",\n            data: [this.state.testSplit]\n        }).then((response) => {\n            if(response.status === 200){\n            console.log(\"SUCCESSS\")\n            console.log(response)\n            this.setState({res: response.body.data});   \n        }else\n            console.log(\"SOMETHING WENT WRONG\")\n        })\n    }\n\n    onTestSplitChange(event) {\n        this.setState({ testSplit: event.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'>\n                    Linear Regression\n                </Header>\n                <div className=\"lin-reg\">\n                    <AddPointForm \n                        points={this.state.points}\n                        onNewPoint={\n                            point => this.setState({\n                                points: [...this.state.points, point]\n                            })\n                        }\n                        updateMetadata={\n                            newMetadata => this.setState({\n                                metadata: newMetadata,\n                                toggle: (this.state.toggle + 1) % 2\n                            })\n                        }\n                    />\n                    <Points \n                        points={this.state.points}\n                        toggle={this.state.toggle}\n                        deletePoint={\n                            i => this.setState({\n                                    points: this.state.points.filter((_, idx) => i !== idx),\n                                    toggle: (this.state.toggle + 1) % 2\n                                })\n                        }\n                    />\n                    <LinRegressChart\n                        points={this.state.points}\n                        bestFitLine={this.state.metadata.bestFitLine}\n                    />\n                    <Header className='lin-reg__stats'\n                            size='small'\n                    >\n                        Slope of Line: {this.state.metadata.m}\n                        <br />\n                        Intercept: {this.state.metadata.b}\n                        <br />\n                        Total Residual: {this.state.metadata.residual}\n                    </Header>\n                </div>\n                <Grid style={{ marginTop: '50px' }} container spacing={0}>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'left'\n                }}>\n                    <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n                        <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\n                        <br /><br /><br />\n                        <div>\n                            <TextField\n                                id=\"testSplit\"\n                                label=\"TestSplit (0 > Value > 1)\"\n                                type=\"number\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                                defaultValue={'0.2'}\n                                required\n                                value={this.state.testSplit}\n                                onChange={this.onTestSplitChange.bind(this)}\n                            />\n                        </div>\n                        <br /><br />\n                    </form>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Test</Button>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-end'\n                }}>\n                    <Button type=\"sublit\"  variant=\"contained\" color=\"primary\" >\n                        Result\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction properMinScaling(n) {\r\n    if (n >= 0)\r\n        return n * 0.9;\r\n    else\r\n        return n * 1.1;\r\n}\r\n\r\nfunction properMaxScaling(n) {\r\n    if (n >= 0)\r\n        return n * 1.1;\r\n    else\r\n        return n * 0.9;\r\n}\r\n\r\nexport class SVMChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 800,\r\n            height: 400,\r\n            radius: 5,\r\n            margin: {\r\n                left: 50,\r\n                right: 10,\r\n                top: 20,\r\n                bottom: 50\r\n            }\r\n        };\r\n\r\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\r\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.update();\r\n    };\r\n\r\n    updateScales() {\r\n        const allPoints = this.props.points\r\n            .concat(this.props.boundaryLine)\r\n            .concat(this.props.upperLine)\r\n            .concat(this.props.lowerLine);\r\n        \r\n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\r\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\r\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\r\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\r\n\r\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\r\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\r\n    }\r\n    \r\n    updatePoints() {\r\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\r\n\r\n        circles.enter().append('circle')\r\n            .merge(circles)\r\n            .attr('r', (d) => this.state.radius)\r\n            .attr('fill', (d) => {\r\n                if (d.label === 1)\r\n                    return \"red\";\r\n                else\r\n                    return \"blue\";\r\n            })\r\n            .attr('label', (d) => d.label)\r\n            .transition().duration(500)\r\n            .attr('cx', (d) => this.xScale(d.x))\r\n            .attr('cy', (d) => this.yScale(d.y))\r\n\r\n        circles.exit().remove();\r\n    }\r\n\r\n    updateLines() {\r\n        const allPoints = [this.props.boundaryLine, this.props.upperLine, this.props.lowerLine];\r\n\r\n        const line = d3.line()\r\n            .x((d) => this.xScale(+d.x))\r\n            .y((d) => this.yScale(+d.y))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        let svmLines = d3.select(this.chartArea)\r\n            .selectAll('path')\r\n            .data(allPoints);\r\n        \r\n        svmLines.enter().append('path')\r\n            .merge(svmLines)\r\n            .attr('class', (_, i) => {\r\n                if (i !== 0)\r\n                    return 'dashed';\r\n            })\r\n            .attr('fill', 'none')\r\n            .attr('stroke', (_, i) => {\r\n                return this.props.colors[i];\r\n            })\r\n            .attr('stroke-width', 3)\r\n            .transition().duration(500)\r\n            .attr('d', (d) => line(d))\r\n    }\r\n    \r\n    updateAxes() {\r\n        let xAxisFunction = d3.axisBottom()\r\n            .scale(this.xScale)\r\n            .ticks(5, 's');\r\n\r\n        let yAxisFunction = d3.axisLeft()\r\n            .scale(this.yScale)\r\n            .ticks(5, 's');\r\n\r\n        d3.select(this.xAxis)\r\n            .call(xAxisFunction);\r\n\r\n        d3.select(this.yAxis)\r\n            .call(yAxisFunction);\r\n    }\r\n    \r\n    update() {\r\n        this.updateScales();\r\n        this.updateAxes();\r\n        this.updatePoints();\r\n        this.updateLines();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"svm__chart\">\r\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\r\n                    <g ref={(node) => { this.chartArea = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\r\n\r\n                    {/* Axes */}\r\n                    <g ref={(node) => { this.xAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\r\n                    <g ref={(node) => { this.yAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\r\n                </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form} from 'semantic-ui-react';\r\n\r\n\r\nexport class SVMSlider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            c: this.props.c\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='svm__slider'>\r\n                <Form>\r\n                    <Form.Input \r\n                        label={'Value of C: ' + this.state.c}\r\n                        min={0.01}\r\n                        max={1}\r\n                        name='c'\r\n                        onChange={e => {\r\n                            this.setState({ c: e.target.value });\r\n                            this.props.updateC(e.target.value);\r\n                        }}\r\n                        step={0.001}\r\n                        type='range'\r\n                        value={this.state.c}\r\n                    />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {List, Button, Icon} from 'semantic-ui-react';\r\nimport './points.css';\r\n\r\nexport class Points extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            points: this.props.points,\r\n            toggle: this.props.toggle,\r\n            deletePoint: this.props.deletePoint\r\n        };\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.toggle !== this.props.toggle) {\r\n            this.setState(this.props);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"svm__points\">\r\n                <h2><u>Points</u>:</h2>\r\n                <div className=\"svm__points-list\">\r\n                    <List>\r\n                    {this.state.points.map((point, i) => {\r\n                        return (\r\n                            <List.Item key={i}>\r\n                                <header className='point-row'>\r\n                                    <span className='point-row__point'>\r\n                                    {point.label === 1 ? 'Red' : 'Blue'}: \r\n                                    ({point.x}, {point.y})\r\n                                    </span>\r\n                                    <Button className='point-row__delete'\r\n                                        onClick={_ => {\r\n                                            this.state.deletePoint(i);\r\n                                        }\r\n                                    }>\r\n                                        <Icon name='close' />\r\n                                    </Button>\r\n                                </header>\r\n                            </List.Item>\r\n                        );\r\n                    })}\r\n                    </List>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form, Input, Dropdown, Button} from 'semantic-ui-react';\r\nimport {PROXY_URL} from '../misc/proxyURL';\r\nimport './addPointForm.css';\r\n\r\nconst options = [\r\n    {\r\n        key: '+1',\r\n        text: 'Red',\r\n        value: 1\r\n    },\r\n    {\r\n        key: '-1',\r\n        text: 'Blue',\r\n        value: -1\r\n    }\r\n]\r\n\r\nfunction validNumber(str) {\r\n    let trimmed = str.trim();\r\n    return trimmed.length > 0 && isFinite(trimmed);\r\n};\r\n\r\nexport async function getMetadata(points, c) {\r\n    const x = [];\r\n    const y = [];\r\n    const labels = [];\r\n    points.map(point => {\r\n        x.push(point.x);\r\n        y.push(point.y);\r\n        labels.push(point.label);\r\n    });\r\n    \r\n    const response = await fetch(PROXY_URL + '/pointtest/svm', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            'x': x,\r\n            'y': y,\r\n            'labels': labels,\r\n            'c': c\r\n        })\r\n    });\r\n\r\n    const metadata = await response.json();\r\n    return metadata;\r\n}\r\n\r\nexport class AddPointForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: '',\r\n            y: '',\r\n            label: null,\r\n            xStatus: '',\r\n            yStatus: '',\r\n            onNewPoint: this.props.onNewPoint,\r\n            updateMetadata: this.props.updateMetadata,\r\n            points: this.props.points\r\n        };\r\n    };\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.points.length !== this.props.points.length\r\n            || prevProps.c !== this.props.c) {\r\n            this.setState({\r\n                points: this.props.points\r\n            });\r\n\r\n            const promise = getMetadata(this.props.points, this.props.c);\r\n            promise.then(metadata => this.state.updateMetadata(metadata));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='svm__form'>\r\n                <h2><u>Input Point</u>:</h2>\r\n                <Form className='xy-form'>\r\n                    <header className=\"xy-form__row\">\r\n                        <Form.Field>\r\n                            <Input  className=\"xy-form__row__input\"\r\n                                    placeholder='X-Coordinate'\r\n                                    value={this.state.x}\r\n                                    onChange={e => {\r\n                                        this.setState({x: e.target.value});\r\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\r\n                                            this.setState({xStatus: ''});\r\n                                        else\r\n                                            this.setState({xStatus: 'Not a number!'});\r\n                                    }}\r\n                            />\r\n                            <span className='xy-form__row__span'>{this.state.xStatus}</span>\r\n                        </Form.Field>\r\n                    </header>\r\n                    <header className=\"xy-form__row\">\r\n                        <Form.Field>\r\n                            <Input  className=\"xy-form__row__input\"\r\n                                    placeholder='Y-Coordinate'\r\n                                    value={this.state.y}\r\n                                    onChange={e => {\r\n                                        this.setState({y: e.target.value});\r\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\r\n                                            this.setState({yStatus: ''});\r\n                                        else\r\n                                            this.setState({yStatus: 'Not a number!'});\r\n                                    }}\r\n                            />\r\n                            <span className=\"xy-form__row__span\">{this.state.yStatus}</span>\r\n                        </Form.Field>\r\n                    </header>\r\n                    <header className=\"xy-form__row\">\r\n                        <Form.Field>\r\n                            <Dropdown   className='xy-form__label'\r\n                                        placeholder='Label'\r\n                                        fluid\r\n                                        selection\r\n                                        options={options}\r\n                                        onChange={(_, data) => {\r\n                                            this.setState({label: data.value});\r\n                                        }}\r\n                            />\r\n                        </Form.Field>\r\n                    </header>\r\n                    <Button primary\r\n                            className=\"add-point\"\r\n                            disabled={!(validNumber(this.state.x) && validNumber(this.state.y))}\r\n                            onClick={async () => {\r\n                                let newPoint = {\r\n                                    x: Number(this.state.x), \r\n                                    y: Number(this.state.y),\r\n                                    label: Number(this.state.label)\r\n                                }\r\n                                this.state.onNewPoint(newPoint);\r\n                                this.setState({\r\n                                    x: '',\r\n                                    y: '',\r\n                                    xStatus: '',\r\n                                    yStatus: ''\r\n                                });\r\n                            }\r\n                    }>\r\n                        Add Point\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\nimport {SVMChart} from './svmChart';\nimport {SVMSlider} from './svmSlider';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Header } from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\nimport {Points} from './points'\nimport {AddPointForm} from './addPointForm';\nimport axios from 'axios';\nimport './svm.css';\n\nexport class SVM extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            testSplit: '0.2',\n            penalty: 'l1',\n            cValue: '1',\n            points: [{x: 1, y: 2, label: 1}, {x: 2, y: 1, label: -1}, {x: 3, y: 4, label: 1}],\n            c: 1,\n            metadata: {\n                boundaryLine: [{x: 0.0, y: 0.0}, {x: 4.0, y: 3.996}],\n                upperLine: [{x: 0.0, y: 0.9995}, {x: 4.0, y: 4.9955}], \n                lowerLine: [{x: 0.0, y: -0.9995}, {x: 4.0, y: 2.9965}],\n                colors: ['#000000', '#FF0000', '#0000FF'],\n                accuracy: '100.00%'\n            },\n            toggle: 0\n        }\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        console.log(this.state.testSplit, this.state.penalty, this.state.cValue);\n        \n        axios({\n          method: \"POST\",\n          url:PROXY_URL + \"/train/svm\", \n          data:  [this.state.testSplit, this.state.penalty, this.state.cValue]\n        }).then((response)=>{\n            if(response.status === 200){\n                console.log(\"SUCCESSS\")\n                console.log(response)\n                //return response;     \n            }else\n                console.log(\"SOMETHING WENT WRONG\")\n        })\n    }git\n    \n      onTestSplitChange(event) {\n        this.setState({testSplit: event.target.value})\n      }\n    \n      onPenaltyChange(event) {\n        this.setState({penalty: event.target.value})\n      }\n    \n      onCValueChange(event) {\n        this.setState({cValue: event.target.value})\n      }\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'>\n                    Support Vector Machine\n                </Header>\n                <div className=\"svm\">\n                    <AddPointForm \n                        points={this.state.points}\n                        onNewPoint={\n                            point => this.setState({\n                                points: [...this.state.points, point]\n                            })\n                        }\n                        updateMetadata={\n                            newMetadata => this.setState({\n                                metadata: newMetadata,\n                                toggle: (this.state.toggle + 1) % 2\n                            })\n                        }\n                        c={this.state.c}\n                    />\n                    <Header className='svm__stats'\n                            size='small'\n                    >\n                        SVM Accuracy: {this.state.metadata.accuracy}\n                    </Header>\n                    <SVMSlider \n                        c={this.state.c}\n                        updateC={\n                            newC => this.setState({\n                                c: newC\n                            })\n                        }\n                    />\n                    <Points \n                        points={this.state.points}\n                        toggle={this.state.toggle}\n                        deletePoint={\n                            i => this.setState({\n                                    points: this.state.points.filter((_, idx) => i !== idx),\n                                    toggle: (this.state.toggle + 1) % 2\n                                })\n                        }\n                    />\n                    <SVMChart \n                        points={this.state.points}\n                        boundaryLine={this.state.metadata.boundaryLine}\n                        upperLine={this.state.metadata.upperLine}\n                        lowerLine={this.state.metadata.lowerLine}\n                        colors={this.state.metadata.colors}\n                    />\n                </div>\n                <Grid style={{ marginTop: '50px' }} container spacing={0}>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'left'\n                }}>\n                    <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n                        <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\n                        <br /><br /><br />\n                        <div>\n                            <TextField\n                                id=\"testSplit\"\n                                label=\"TestSplit (0 > Value > 1)\"\n                                type=\"number\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                                defaultValue={'0.2'}\n                                required\n                                value={this.state.testSplit}\n                                onChange={this.onTestSplitChange.bind(this)}\n                            />\n                        </div>\n                        <br /><br />\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Penalty</FormLabel>\n                            <RadioGroup aria-label=\"penalty\" name=\"penalty\" required value={this.state.penalty} onChange={this.onPenaltyChange.bind(this)}>\n                                <FormControlLabel default value=\"l1\" control={<Radio />} label=\"L1\" />\n                                <FormControlLabel value=\"l2\" control={<Radio />} label=\"L2\" />\n                            </RadioGroup>\n                        </FormControl>\n                        <br /><br /><br />\n                        <div>\n                            <TextField\n                                id=\"c\"\n                                label=\"C (0 > Value > 1)\"\n                                type=\"number\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                                defaultValue={1}\n                                required\n                                value={this.state.cValue}\n                                onChange={this.onCValueChange.bind(this)}\n                            />\n                        </div>\n                        <br /><br />\n                    </form>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Test</Button>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-end'\n                }}>\n                    <Button type=\"sublit\"  variant=\"contained\" color=\"primary\" >\n                        Result\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport {List, Button, Icon} from 'semantic-ui-react';\r\nimport './points.css';\r\n\r\nexport class Points extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            points: this.props.points,\r\n            toggle: this.props.toggle,\r\n            deletePoint: this.props.deletePoint\r\n        };\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.toggle !== this.props.toggle) {\r\n            this.setState(this.props);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"kmeans__points\">\r\n                <h2><u>Points</u>:</h2>\r\n                <div className=\"kmeans__points-list\">\r\n                    <List>\r\n                    {this.state.points.map((point, i) => {\r\n                        return (\r\n                            <List.Item key={i}>\r\n                                <header className='point-row'>\r\n                                    <span className='point-row__point'>\r\n                                        ({point.x}, {point.y})\r\n                                    </span>\r\n                                    <Button className='point-row__delete'\r\n                                        onClick={_ => {\r\n                                            this.state.deletePoint(i);\r\n                                        }\r\n                                    }>\r\n                                        <Icon name='close' />\r\n                                    </Button>\r\n                                </header>\r\n                            </List.Item>\r\n                        );\r\n                    })}\r\n                    </List>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form, Input, Button} from 'semantic-ui-react';\r\nimport {PROXY_URL} from '../misc/proxyURL';\r\nimport './addPointForm.css';\r\n\r\n\r\nfunction validNumber(str) {\r\n    let trimmed = str.trim();\r\n    return trimmed.length > 0 && isFinite(trimmed);\r\n};\r\n\r\nexport async function getMetadata(points, k) {\r\n    const x = [];\r\n    const y = [];\r\n    points.map(point => {\r\n        x.push(point.x);\r\n        y.push(point.y);\r\n    });\r\n    \r\n    const response = await fetch(PROXY_URL + '/pointtest/kmeans', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            'x': x,\r\n            'y': y,\r\n            'k': k\r\n        })\r\n    });\r\n\r\n    const metadata = await response.json();\r\n    return metadata;\r\n}\r\n\r\nexport class AddPointForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            x: '',\r\n            y: '',\r\n            label: null,\r\n            xStatus: '',\r\n            yStatus: '',\r\n            onNewPoint: this.props.onNewPoint,\r\n            updateData: this.props.updateData,\r\n            points: this.props.points\r\n        };\r\n    };\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        if (prevProps.points.length !== this.props.points.length\r\n            || prevProps.k !== this.props.k) {\r\n            this.setState({\r\n                points: this.props.points\r\n            });\r\n\r\n            const promise = getMetadata(this.props.points, this.props.k);\r\n            promise.then(newData => this.state.updateData(newData));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='kmeans__form'>\r\n                <h2><u>Input Point</u>:</h2>\r\n                <Form className='xy-form'>\r\n                    <header className=\"xy-form__row\">\r\n                        <Form.Field>\r\n                            <Input  className=\"xy-form__row__input\"\r\n                                    placeholder='X-Coordinate'\r\n                                    value={this.state.x}\r\n                                    onChange={e => {\r\n                                        this.setState({x: e.target.value});\r\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\r\n                                            this.setState({xStatus: ''});\r\n                                        else\r\n                                            this.setState({xStatus: 'Not a number!'});\r\n                                    }}\r\n                            />\r\n                            <span className='xy-form__row__span'>{this.state.xStatus}</span>\r\n                        </Form.Field>\r\n                    </header>\r\n                    <header className=\"xy-form__row\">\r\n                        <Form.Field>\r\n                            <Input  className=\"xy-form__row__input\"\r\n                                    placeholder='Y-Coordinate'\r\n                                    value={this.state.y}\r\n                                    onChange={e => {\r\n                                        this.setState({y: e.target.value});\r\n                                        if (validNumber(e.target.value) || e.target.value.length === 0)\r\n                                            this.setState({yStatus: ''});\r\n                                        else\r\n                                            this.setState({yStatus: 'Not a number!'});\r\n                                    }}\r\n                            />\r\n                            <span className=\"xy-form__row__span\">{this.state.yStatus}</span>\r\n                        </Form.Field>\r\n                    </header>\r\n                    <Button primary\r\n                            className=\"add-point\"\r\n                            disabled={!(validNumber(this.state.x) && validNumber(this.state.y))}\r\n                            onClick={async () => {\r\n                                let newPoint = {\r\n                                    x: Number(this.state.x), \r\n                                    y: Number(this.state.y),\r\n                                    label: Number(this.state.label)\r\n                                }\r\n                                this.state.onNewPoint(newPoint);\r\n                                this.setState({\r\n                                    x: '',\r\n                                    y: '',\r\n                                    xStatus: '',\r\n                                    yStatus: ''\r\n                                });\r\n                            }\r\n                    }>\r\n                        Add Point\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction properMinScaling(n) {\r\n    if (n >= 0)\r\n        return n * 0.9;\r\n    else\r\n        return n * 1.1;\r\n}\r\n\r\nfunction properMaxScaling(n) {\r\n    if (n >= 0)\r\n        return n * 1.1;\r\n    else\r\n        return n * 0.9;\r\n}\r\n\r\nexport class KMeansChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 800,\r\n            height: 400,\r\n            radius: 5,\r\n            margin: {\r\n                left: 50,\r\n                right: 10,\r\n                top: 20,\r\n                bottom: 50\r\n            }\r\n        };\r\n\r\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\r\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.update();\r\n    };\r\n\r\n    updateScales() {\r\n        const allPoints = this.props.points\r\n            .concat(this.props.centroids);\r\n        \r\n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\r\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\r\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\r\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\r\n\r\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\r\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\r\n    }\r\n    \r\n    updatePoints() {\r\n        let centroids = d3.select(this.chartArea).selectAll('rect').data(this.props.centroids);\r\n        let r = this.state.radius;\r\n        let colors = this.props.colors;\r\n\r\n        centroids.enter().append('rect')\r\n            .merge(centroids)\r\n            .attr('width', r * 4)\r\n            .attr('height', r * 4)\r\n            .attr('fill-opacity', 0.6)\r\n            .attr('fill', (d) => colors[d.label])\r\n            .attr('label', (d) => d.label)\r\n            .transition().duration(500)\r\n            .attr('x', (d) => this.xScale(d.x) - 2*r)\r\n            .attr('y', (d) => this.yScale(d.y) - 2*r)\r\n\r\n        centroids.exit().remove();\r\n\r\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\r\n\r\n        circles.enter().append('circle')\r\n            .merge(circles)\r\n            .attr('r', (d) => r)\r\n            .attr('fill', (d) => colors[d.label])\r\n            .attr('label', (d) => d.label)\r\n            .transition().duration(500)\r\n            .attr('cx', (d) => this.xScale(d.x))\r\n            .attr('cy', (d) => this.yScale(d.y))\r\n\r\n        circles.exit().remove();\r\n    }\r\n    \r\n    updateAxes() {\r\n        let xAxisFunction = d3.axisBottom()\r\n            .scale(this.xScale)\r\n            .ticks(5, 's');\r\n\r\n        let yAxisFunction = d3.axisLeft()\r\n            .scale(this.yScale)\r\n            .ticks(5, 's');\r\n\r\n        d3.select(this.xAxis)\r\n            .call(xAxisFunction);\r\n\r\n        d3.select(this.yAxis)\r\n            .call(yAxisFunction);\r\n    }\r\n    \r\n    update() {\r\n        this.updateScales();\r\n        this.updateAxes();\r\n        this.updatePoints();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"kmeans__chart\">\r\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\r\n                    <g ref={(node) => { this.chartArea = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\r\n\r\n                    {/* Axes */}\r\n                    <g ref={(node) => { this.xAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\r\n                    <g ref={(node) => { this.yAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\r\n                </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form} from 'semantic-ui-react';\r\n\r\n\r\nexport class KMeansSlider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            k: this.props.k\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='kmeans__slider'>\r\n                <Form>\r\n                    <Form.Input \r\n                        label={'Number of Clusters: ' + this.state.k}\r\n                        min={1}\r\n                        max={this.props.maxColors}\r\n                        name='k'\r\n                        onChange={e => {\r\n                            this.setState({ k: e.target.value });\r\n                            this.props.updateK(e.target.value);\r\n                        }}\r\n                        step={1}\r\n                        type='range'\r\n                        value={this.state.k}\r\n                    />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {PROXY_URL} from '../misc/proxyURL';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Points} from './points'\r\nimport {AddPointForm} from './addPointForm';\r\nimport {KMeansChart} from './kmeansChart';\r\nimport {KMeansSlider} from './kmeansSlider';\r\nimport axios from 'axios';\r\nimport './kmeans.css';\r\n\r\nconst colors = [\r\n    'red',\r\n    'green',\r\n    'blue',\r\n    'orange',\r\n    'green',\r\n    'sienna',\r\n    'peachpuff',\r\n    'purple',\r\n    'pink',\r\n    'turquoise'\r\n];\r\n\r\nexport class KMeans extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kvalue: 2,\r\n            k: 2,\r\n            points: [{x: 1, y: 2, label: 0}, {x: 2, y: 1, label: 0}, {x: 3, y: 4, label: 0}],\r\n            centroids: [{x: 2.0, y: 2.3333333333333335, label: 0}],\r\n            toggle: 0\r\n        };\r\n    };\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        console.log(this.state.kvalue);\r\n        \r\n        axios({\r\n          method: \"POST\",\r\n          url:PROXY_URL + '/train/kmeans', \r\n          data: [this.state.k]\r\n        }).then((response)=>{\r\n          console.log(response);\r\n        })\r\n      }\r\n    \r\n    onKValueChange(event) {\r\n        this.setState({kvalue: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header className='title'\r\n                        size='huge'\r\n                >\r\n                    K-Means\r\n                </Header>\r\n                <div className=\"kmeans\">\r\n                    <AddPointForm \r\n                        points={this.state.points}\r\n                        onNewPoint={\r\n                            point => this.setState({\r\n                                points: [...this.state.points, point]\r\n                            })\r\n                        }\r\n                        updateData={\r\n                            outputData => this.setState({\r\n                                centroids: outputData.centroids,\r\n                                points: outputData.points,\r\n                                toggle: (this.state.toggle + 1) % 2\r\n                            })\r\n                        }\r\n                        k={this.state.k}\r\n                    />\r\n                    <KMeansSlider \r\n                        k={this.state.k}\r\n                        updateK={\r\n                            newK => this.setState({\r\n                                k: newK\r\n                            })\r\n                        }\r\n                        maxColors={colors.length}\r\n                    />\r\n                    <Points \r\n                        points={this.state.points}\r\n                        toggle={this.state.toggle}\r\n                        deletePoint={\r\n                            i => this.setState({\r\n                                    points: this.state.points.filter((_, idx) => i !== idx),\r\n                                    toggle: (this.state.toggle + 1) % 2\r\n                                })\r\n                        }\r\n                    />\r\n                    <KMeansChart \r\n                        points={this.state.points}\r\n                        centroids={this.state.centroids}\r\n                        colors={colors}\r\n                    />\r\n                </div>\r\n                <Grid style={{ marginTop: '50px' }} container spacing={0}>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'left'\r\n                    }}>\r\n                        <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\r\n                            <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\r\n                            <br /><br /><br />\r\n                            <div>\r\n                                <TextField\r\n                                    id=\"k\"\r\n                                    label=\"K (Value >= 2)\"\r\n                                    type=\"number\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    defaultValue={'2'}\r\n                                    required\r\n                                    value={this.state.kvalue}\r\n                                    onChange={this.onKValueChange.bind(this)}\r\n                                />\r\n                            </div>\r\n                            <br /><br />\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Test \r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'flex-end'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Result\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\nimport {List, Button, Icon} from 'semantic-ui-react';\nimport {InlineMath} from 'react-katex';\nimport './gaussians.css';\n\nexport class Gaussians extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            means: this.props.means,\n            covMats: this.props.covMats,\n            toggle: this.props.toggle,\n            deletePair: this.props.deletePair\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.toggle !== this.props.toggle) {\n            this.setState(this.props);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"lda__points\">\n                <h2><u>Gaussian Classes</u>:</h2>\n                <div className=\"lda__points-list\">\n                    <List>\n                    {this.state.means.map((meanVec, i) => {\n                        return (\n                            <List.Item key={i}>\n                                <header className='point-row'>\n                                    <span className='point-row__point'>\n                                    (   <InlineMath math='\\mu_X = ' /> &nbsp; {meanVec[0]}, &nbsp;\n                                        <InlineMath math='\\mu_Y = ' /> &nbsp; {meanVec[1]},  &nbsp;\n                                        <InlineMath math='\\sigma_X^2 = ' /> &nbsp; {this.state.covMats[i][0][0]}, &nbsp;\n                                        <InlineMath math='\\sigma_Y^2 = ' /> &nbsp; {this.state.covMats[i][1][1]},  &nbsp;\n                                        <InlineMath math='\\sigma_{XY} = ' /> &nbsp; {this.state.covMats[i][0][1]}\n                                    )\n                                    </span>\n                                    <Button className='point-row__delete'\n                                        onClick={_ => {\n                                            this.state.deletePair(i);\n                                        }\n                                    }>\n                                        <Icon name='close' />\n                                    </Button>\n                                </header>\n                            </List.Item>\n                        );\n                    })}\n                    </List>\n                </div>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport {Form, Input, Button} from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport {InlineMath} from 'react-katex';\nimport './addGaussianForm.css';\n\nfunction validNumber(str) {\n    let trimmed = str.trim();\n    return trimmed.length > 0 && isFinite(trimmed);\n};\n\nexport async function getMetadata(means, covarianceMatrices) {\n    const response = await fetch(PROXY_URL + '/pointtest/lda', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            'means': means,\n            'covarianceMatrices': covarianceMatrices\n        })\n    });\n\n    const metadata = await response.json();\n    return metadata;\n}\n\nexport class AddGaussianForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: {value: '', status: ''}, \n            y: {value: '', status: ''},\n            varX: {value: '', status: ''},\n            varY: {value: '', status: ''},\n            covXY: {value: '', status: ''},\n            onNewInput: this.props.onNewInput,\n            updateMetadata: this.props.updateMetadata,\n            means: this.props.means,\n            covarianceMatrices: this.props.covarianceMatrices\n        };\n    };\n\n    async componentDidUpdate(prevProps) {\n        if (prevProps.means.length !== this.props.means.length) {\n            this.setState({\n                means: this.props.means,\n                covarianceMatrices: this.props.covarianceMatrices\n            });\n\n            const promise = getMetadata(this.props.means, this.props.covarianceMatrices);\n            promise.then(metadata => this.state.updateMetadata(metadata));\n        }\n    };\n\n    render() {\n        return (\n            <div className='lda__form'>\n                <h2><u>Input Gaussian Class</u>:</h2>\n                <Form>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_X' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.x.value}\n                                onChange={e => {\n                                    let newX = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newX.status = '';\n                                    else\n                                        newX.status = 'Not a number!';\n                                    this.setState({x: newX});\n                                }}\n                        />\n                        <span className='lda-form__row__span'>{this.state.x.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_Y' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.y.value}\n                                onChange={e => {\n                                    let newY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newY.status = '';\n                                    else\n                                        newY.status = 'Not a number!';\n                                    this.setState({y: newY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.y.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_X^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varX.value}\n                                onChange={e => {\n                                    let newVarX = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarX.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarX.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarX.status = 'Variance is non-negative!';\n                                    else\n                                        newVarX.status = '';\n                                    this.setState({varX: newVarX});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varX.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_Y^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varY.value}\n                                onChange={e => {\n                                    let newVarY = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarY.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarY.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarY.status = 'Variance is non-negative!';\n                                    else\n                                        newVarY.status = '';\n                                    this.setState({varY: newVarY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varY.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_{XY}' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.covXY.value}\n                                onChange={e => {\n                                    let newCovXY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newCovXY.status = '';\n                                    else\n                                        newCovXY.status = 'Not a number!';\n                                    this.setState({covXY: newCovXY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.covXY.status}</span>\n                    </header>\n                    <Button primary\n                            className=\"add-point\"\n                            disabled={!(validNumber(this.state.x.value) && \n                                        validNumber(this.state.y.value) &&\n                                        validNumber(this.state.varX.value) &&\n                                        this.state.varX.value >= 0 &&\n                                        validNumber(this.state.varY.value) &&\n                                        this.state.varY.value >= 0 &&\n                                        validNumber(this.state.covXY.value)\n                                    )}\n                            onClick={async () => {\n                                let newMean = [\n                                    Number(this.state.x.value), \n                                    Number(this.state.y.value)\n                                ]\n                                let newCovMat = [\n                                    [this.state.varX.value, this.state.covXY.value],\n                                    [this.state.covXY.value, this.state.varY.value]\n                                ]\n                                this.state.onNewInput(newMean, newCovMat);\n                                this.setState({\n                                    x: {value: '', status: ''},\n                                    y: {value: '', status: ''},\n                                    varX: {value: '', status: ''},\n                                    varY: {value: '', status: ''},\n                                    covXY: {value: '', status: ''}\n                                });\n                            }\n                    }>\n                        Add Gaussian Class\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nconst colors = [\n    'red',\n    'green',\n    'blue',\n    'orange',\n    'green',\n    'sienna',\n    'peachpuff',\n    'purple',\n    'pink',\n    'turquoise'\n];\n\nfunction properMinScaling(n) {\n    if (n >= 0)\n        return n * 0.9;\n    else\n        return n * 1.1;\n}\n\nfunction properMaxScaling(n) {\n    if (n >= 0)\n        return n * 1.1;\n    else\n        return n * 0.9;\n}\n\nexport class LDAChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 400,\n            radius: 3,\n            margin: {\n                left: 50,\n                right: 10,\n                top: 20,\n                bottom: 50\n            }\n        };\n\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\n    };\n\n    componentDidMount() {\n        this.update();\n    }\n\n    componentDidUpdate() {\n        this.update();\n    };\n\n    updateScales() {\n        const allPoints = this.props.points\n            .concat(this.props.line);\n        \n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\n\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\n    }\n    \n    updatePoints() {\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\n\n        circles.enter().append('circle')\n            .merge(circles)\n            .attr('r', (d) => this.state.radius)\n            .attr('fill', (d) => {\n                return colors[d.label % colors.length];\n            })\n            .attr('label', (d) => d.label)\n            .transition().duration(500)\n            .attr('cx', (d) => this.xScale(d.x))\n            .attr('cy', (d) => this.yScale(d.y))\n\n        circles.exit().remove();\n    }\n\n    updateLines() {\n        const allPoints = [this.props.line];\n\n        const line = d3.line()\n            .x((d) => this.xScale(+d.x))\n            .y((d) => this.yScale(+d.y))\n            .curve(d3.curveMonotoneX);\n\n        let ldaLine = d3.select(this.chartArea)\n            .selectAll('path')\n            .data(allPoints);\n        \n        ldaLine.enter().append('path')\n            .merge(ldaLine)\n            .attr('fill', 'none')\n            .attr('stroke', (_, i) => {\n                return 'black';\n            })\n            .attr('stroke-width', 3)\n            .transition().duration(500)\n            .attr('d', (d) => line(d))\n    }\n    \n    updateAxes() {\n        let xAxisFunction = d3.axisBottom()\n            .scale(this.xScale)\n            .ticks(5, 's');\n\n        let yAxisFunction = d3.axisLeft()\n            .scale(this.yScale)\n            .ticks(5, 's');\n\n        d3.select(this.xAxis)\n            .call(xAxisFunction);\n\n        d3.select(this.yAxis)\n            .call(yAxisFunction);\n    }\n    \n    update() {\n        this.updateScales();\n        this.updateAxes();\n        this.updatePoints();\n        this.updateLines();\n    }\n\n    render() {\n        return (\n            <div className=\"lda__chart\">\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\n                    <g ref={(node) => { this.chartArea = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\n\n                    {/* Axes */}\n                    <g ref={(node) => { this.xAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\n                    <g ref={(node) => { this.yAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\n                </svg>\n            </div>\n\n        )\n    }\n};","import React, {Component} from 'react';\nimport {Gaussians} from './gaussians'\nimport {AddGaussianForm} from './addGaussianForm';\nimport {LDAChart} from './ldaChart';\nimport { Header } from 'semantic-ui-react';\nimport './lda.css';\n\nexport class LDA extends Component {\n    constructor() {\n        super();\n        this.state = {\n            means: [],\n            covarianceMatrices: [],\n            metadata: {\n                points: [],\n                line: []\n            },\n            toggle: 0\n        };\n    };\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'\n                >\n                    Linear Discriminant Analysis\n                </Header>\n                <div className=\"lda\">\n                    <AddGaussianForm \n                        means={this.state.means}\n                        covarianceMatrices={this.state.covarianceMatrices}\n                        onNewInput={\n                            (meanVector, covMat) => this.setState({\n                                means: [...this.state.means, meanVector],\n                                covarianceMatrices: [...this.state.covarianceMatrices, covMat]\n                            })\n                        }\n                        updateMetadata={\n                            newMetadata => this.setState({\n                                metadata: newMetadata,\n                                toggle: (this.state.toggle + 1) % 2\n                            })\n                        }\n                    />\n                    <Gaussians \n                        means={this.state.means}\n                        covMats={this.state.covarianceMatrices}\n                        toggle={this.state.toggle}\n                        deletePair={\n                            i => this.setState({\n                                    means: this.state.means.filter((_, idx) => i !== idx),\n                                    covarianceMatrices: this.state.covarianceMatrices.filter((_, idx) => i !== idx),\n                                    toggle: (this.state.toggle + 1) % 2\n                                })\n                        }\n                    />\n                    <LDAChart \n                        points={this.state.metadata.points}\n                        line={this.state.metadata.line}\n                    />\n                </div>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n    color:\"inherit\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nexport const NavBar = _ => {\n  const classes = useStyles();\n  let history = useHistory();\n  const pushLink = link => {\n    history.push(link);\n  }\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            DWM Mini Project \n          </Typography>\n        </Toolbar>\n        <div>\n          <Button style={{ width: '10%' }} color=\"inherit\" onClick={()=>{pushLink('/')}}>Home</Button>\n          <Button style={{ width: '10%' }} color=\"inherit\" onClick={()=>{pushLink('/lin-reg')}}>Linear</Button>\n          <Button style={{ width: '10%' }} color=\"inherit\" onClick={()=>{pushLink('/k-means')}}>K-Means</Button>\n          <Button style={{ width: '10%' }} color=\"inherit\" onClick={()=>{pushLink('/svm')}}>SVM</Button>\n          <Button style={{ width: '10%' }} color=\"inherit\" onClick={()=>{pushLink('/lda')}}>LDA</Button>\n        </div>\n      </AppBar> \n    </div>      \n  );\n}\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Button from \"@material-ui/core/Button\";\nimport { PROXY_URL } from '../misc/proxyURL';\nimport './homePage.css';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.uploadFile = this.uploadFile.bind(this);\n    }\n\n    uploadFile(ev) {\n        ev.preventDefault();\n\n        const data = new FormData();\n        data.append('file', this.uploadInput.files[0]);\n\n        fetch(PROXY_URL + '/upload', {\n            method: 'POST',\n            body: data,\n        });\n    }\n\n    render() {\n        return ( <\n            div className = 'home-page' >\n            <\n            Header size = 'huge' >\n            Welcome to the Classical Machine Learning Visualizer!\n            <\n            /Header> <\n            br / >\n            <\n            Header size = 'huge' >\n            Upload the dataset( in csv, json or yaml) on which you would like to visualize the Machine Learning models. <\n            /Header> <\n            br / >\n            <\n            form onSubmit = { this.uploadFile } >\n            <\n            div >\n            <\n            input accept = \".csv, .json, .yml\"\n            single ref = {\n                (ref) => { this.uploadInput = ref; }\n            }\n            type = \"file\" / >\n            <\n            /div> <\n            br / >\n            <\n            div >\n            <\n            Button type = \"submit\"\n            valud = \"Submit\"\n            variant = \"contained\"\n            color = \"primary\" > Submit < /Button> < /\n            div > <\n            /form> < /\n            div >\n        );\n    }\n}\n\nexport default HomePage;","import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { LinReg } from './components/lin-reg/linReg';\nimport { SVM } from './components/svm/svm';\nimport { KMeans } from './components/kmeans/kmeans';\nimport { LDA } from './components/lda/lda';\nimport { NavBar } from './components/navbar/navbar';\nimport HomePage from './components/home/homePage';\nimport history from './components/history/history';\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return ( <BrowserRouter history={history} >\n            <React.Fragment >\n            <NavBar/>\n            <div className = \"main-content\" >\n            <Switch>\n            <Route path = \"/lin-reg\"\n            component = { LinReg }/>{\" \"} \n            <Route path = \"/svm\"\n            component = { SVM }\n            />{\" \"} \n            <Route path = \"/k-means\"\n            component = { KMeans }\n            />{\" \"} \n            <Route path = \"/lda\"\n            component = { LDA }\n            />{\" \"}\n            <Route path = \"/\"\n            component = { HomePage }\n            />{\" \"}\n            </Switch>{\" \"}\n            </div>{\" \"} \n            </React.Fragment>{\" \"} \n            </BrowserRouter>\n        );\n    }\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'katex/dist/katex.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}