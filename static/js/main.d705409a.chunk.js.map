{"version":3,"sources":["components/misc/proxyURL.js","components/lin-reg/linReg.js","components/svm/svmChart.js","components/svm/svmSlider.js","components/svm/svm.js","components/kmeans/kmeans.js","components/lda/gaussians.js","components/lda/addGaussianForm.js","components/lda/ldaChart.js","components/lda/lda.js","components/history/history.js","components/navbar/navbar.js","components/home/homePage.js","App.js","serviceWorker.js","index.js"],"names":["PROXY_URL","LinReg","props","state","testSplit","e","preventDefault","console","log","this","axios","method","url","data","then","response","event","setState","target","value","Header","className","size","Grid","style","marginTop","container","spacing","item","xs","display","flexDirection","alignItems","onSubmit","handleSubmit","bind","TextField","id","label","type","InputLabelProps","shrink","variant","defaultValue","required","onChange","onTestSplitChange","Button","color","width","Component","properMinScaling","n","properMaxScaling","SVM","penalty","c","FormControl","component","FormLabel","RadioGroup","aria-label","name","onPenaltyChange","FormControlLabel","control","Radio","onCChange","KMeans","k","onKChange","Gaussians","means","covMats","toggle","deletePair","prevProps","List","map","meanVec","i","Item","key","math","onClick","_","Icon","validNumber","str","trimmed","trim","length","isFinite","getMetadata","covarianceMatrices","a","async","fetch","headers","body","JSON","stringify","json","metadata","AddGaussianForm","x","status","y","varX","varY","covXY","onNewInput","updateMetadata","Form","class","Input","newX","newY","newVarX","newVarY","newCovXY","primary","disabled","newMean","Number","newCovMat","colors","LDAChart","height","radius","margin","left","right","top","bottom","drawWidth","drawHeight","update","allPoints","points","concat","line","xMin","d3","d","xMax","yMin","yMax","xScale","domain","range","yScale","circles","chartArea","selectAll","enter","append","merge","attr","transition","duration","exit","remove","curve","ldaLine","xAxisFunction","scale","ticks","yAxisFunction","xAxis","call","yAxis","updateScales","updateAxes","updatePoints","updateLines","ref","node","transform","LDA","meanVector","covMat","newMetadata","filter","idx","history","useStyles","makeStyles","theme","root","flexGrow","justifyContent","menuButton","marginRight","button","formControl","minWidth","NavBar","classes","useHistory","pushLink","link","push","AppBar","position","Toolbar","Typography","HomePage","uploadFile","ev","FormData","uploadInput","files","accept","single","valud","React","App","Fragment","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d705409a.chunk.js","sourcesContent":["export const PROXY_URL = \"http://localhost:5000\";","import React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { PROXY_URL } from '../misc/proxyURL';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport './linReg.css';\n\nexport class LinReg extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            testSplit: '0.2'\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(this.state.testSplit);\n\n        axios({\n            method: \"POST\",\n            url: PROXY_URL + \"/train/lin_regress\",\n            data: [this.state.testSplit]\n        }).then((response) => {\n            console.log(response);\n        })\n    }\n\n    onTestSplitChange(event) {\n        this.setState({ testSplit: event.target.value })\n    }\n\n    render() {\n        return ( <\n            div >\n            <\n            Header className = 'title'\n            size = 'huge' >\n            Linear Regression <\n            /Header> <\n            Grid style = {\n                { marginTop: '500px' }\n            }\n            container spacing = { 0 } >\n            <\n            Grid item xs = { 3 }\n            style = {\n                {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'left'\n                }\n            } >\n            <\n            form onSubmit = { this.handleSubmit.bind(this) }\n            method = \"POST\" >\n            <\n            div >\n            <\n            TextField id = \"testSplit\"\n            label = \"TestSplit (0 > Value > 1)\"\n            type = \"number\"\n            InputLabelProps = {\n                {\n                    shrink: true,\n                }\n            }\n            variant = \"outlined\"\n            defaultValue = { '0.2' }\n            required value = { this.state.testSplit }\n            onChange = { this.onTestSplitChange.bind(this) }\n            /> < /\n            div > <\n            br / > < br / >\n            <\n            Button type = \"submit\"\n            value = \"Submit\"\n            variant = \"contained\"\n            color = \"primary\" > Train < /Button> < /\n            form > <\n            /Grid> <\n            Grid item xs = { 3 }\n            style = {\n                {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }\n            } >\n            <\n            Button style = {\n                { width: '40%' }\n            }\n            variant = \"contained\"\n            color = \"primary\" >\n            Test <\n            /Button> < /\n            Grid > <\n            Grid item xs = { 3 }\n            style = {\n                {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-end'\n                }\n            } >\n            <\n            Button style = {\n                { width: '40%' }\n            }\n            variant = \"contained\"\n            color = \"primary\" >\n            Result <\n            /Button> < /\n            Grid > <\n            /Grid> < /\n            div >\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nfunction properMinScaling(n) {\r\n    if (n >= 0)\r\n        return n * 0.9;\r\n    else\r\n        return n * 1.1;\r\n}\r\n\r\nfunction properMaxScaling(n) {\r\n    if (n >= 0)\r\n        return n * 1.1;\r\n    else\r\n        return n * 0.9;\r\n}\r\n\r\nexport class SVMChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: 800,\r\n            height: 400,\r\n            radius: 5,\r\n            margin: {\r\n                left: 50,\r\n                right: 10,\r\n                top: 20,\r\n                bottom: 50\r\n            }\r\n        };\r\n\r\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\r\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.update();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.update();\r\n    };\r\n\r\n    updateScales() {\r\n        const allPoints = this.props.points\r\n            .concat(this.props.boundaryLine)\r\n            .concat(this.props.upperLine)\r\n            .concat(this.props.lowerLine);\r\n        \r\n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\r\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\r\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\r\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\r\n\r\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\r\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\r\n    }\r\n    \r\n    updatePoints() {\r\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\r\n\r\n        circles.enter().append('circle')\r\n            .merge(circles)\r\n            .attr('r', (d) => this.state.radius)\r\n            .attr('fill', (d) => {\r\n                if (d.label === 1)\r\n                    return \"red\";\r\n                else\r\n                    return \"blue\";\r\n            })\r\n            .attr('label', (d) => d.label)\r\n            .transition().duration(500)\r\n            .attr('cx', (d) => this.xScale(d.x))\r\n            .attr('cy', (d) => this.yScale(d.y))\r\n\r\n        circles.exit().remove();\r\n    }\r\n\r\n    updateLines() {\r\n        const allPoints = [this.props.boundaryLine, this.props.upperLine, this.props.lowerLine];\r\n\r\n        const line = d3.line()\r\n            .x((d) => this.xScale(+d.x))\r\n            .y((d) => this.yScale(+d.y))\r\n            .curve(d3.curveMonotoneX);\r\n\r\n        let svmLines = d3.select(this.chartArea)\r\n            .selectAll('path')\r\n            .data(allPoints);\r\n        \r\n        svmLines.enter().append('path')\r\n            .merge(svmLines)\r\n            .attr('class', (_, i) => {\r\n                if (i !== 0)\r\n                    return 'dashed';\r\n            })\r\n            .attr('fill', 'none')\r\n            .attr('stroke', (_, i) => {\r\n                return this.props.colors[i];\r\n            })\r\n            .attr('stroke-width', 3)\r\n            .transition().duration(500)\r\n            .attr('d', (d) => line(d))\r\n    }\r\n    \r\n    updateAxes() {\r\n        let xAxisFunction = d3.axisBottom()\r\n            .scale(this.xScale)\r\n            .ticks(5, 's');\r\n\r\n        let yAxisFunction = d3.axisLeft()\r\n            .scale(this.yScale)\r\n            .ticks(5, 's');\r\n\r\n        d3.select(this.xAxis)\r\n            .call(xAxisFunction);\r\n\r\n        d3.select(this.yAxis)\r\n            .call(yAxisFunction);\r\n    }\r\n    \r\n    update() {\r\n        this.updateScales();\r\n        this.updateAxes();\r\n        this.updatePoints();\r\n        this.updateLines();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"svm__chart\">\r\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\r\n                    <g ref={(node) => { this.chartArea = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\r\n\r\n                    {/* Axes */}\r\n                    <g ref={(node) => { this.xAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\r\n                    <g ref={(node) => { this.yAxis = node; }}\r\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\r\n                </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Form} from 'semantic-ui-react';\r\n\r\n\r\nexport class SVMSlider extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            c: this.props.c\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='svm__slider'>\r\n                <Form>\r\n                    <Form.Input \r\n                        label={'Value of C: ' + this.state.c}\r\n                        min={0.01}\r\n                        max={1}\r\n                        name='c'\r\n                        onChange={e => {\r\n                            this.setState({ c: e.target.value });\r\n                            this.props.updateC(e.target.value);\r\n                        }}\r\n                        step={0.001}\r\n                        type='range'\r\n                        value={this.state.c}\r\n                    />\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\nimport {SVMChart} from './svmChart';\nimport {SVMSlider} from './svmSlider';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Header } from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport TextField from '@material-ui/core/TextField';\nimport axios from 'axios';\nimport './svm.css';\n\nexport class SVM extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            testSplit: '0.2',\n            penalty: 'l1',\n            c: '1'\n        }\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        console.log(this.state.testSplit, this.state.penalty, this.state.c);\n        \n        axios({\n          method: \"POST\",\n          url:PROXY_URL + \"/train/svm\", \n          data:  [this.state.testSplit, this.state.penalty, this.state.c]\n        }).then((response)=>{\n          console.log(response);\n        })\n      }\n    \n      onTestSplitChange(event) {\n        this.setState({testSplit: event.target.value})\n      }\n    \n      onPenaltyChange(event) {\n        this.setState({penalty: event.target.value})\n      }\n    \n      onCChange(event) {\n        this.setState({c: event.target.value})\n      }\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'>\n                    Support Vector Machine\n                </Header> \n                <Grid style={{ marginTop: '500px' }} container spacing={0}>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'left'\n                }}>\n                    <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n                        <div>\n                            <TextField\n                                id=\"testSplit\"\n                                label=\"TestSplit (0 > Value > 1)\"\n                                type=\"number\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                                defaultValue={'0.2'}\n                                required\n                                value={this.state.testSplit}\n                                onChange={this.onTestSplitChange.bind(this)}\n                            />\n                        </div>\n                        <br /><br />\n                        <FormControl component=\"fieldset\">\n                            <FormLabel component=\"legend\">Penalty</FormLabel>\n                            <RadioGroup aria-label=\"penalty\" name=\"penalty\" required value={this.state.penalty} onChange={this.onPenaltyChange.bind(this)}>\n                                <FormControlLabel value=\"l1\" control={<Radio />} label=\"L1\" />\n                                <FormControlLabel value=\"l2\" control={<Radio />} label=\"L2\" />\n                            </RadioGroup>\n                        </FormControl>\n                        <br /><br />\n                        <div>\n                            <TextField\n                                id=\"c\"\n                                label=\"C (0 > Value > 1)\"\n                                type=\"number\"\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                variant=\"outlined\"\n                                defaultValue={1}\n                                required\n                                value={this.state.c}\n                                onChange={this.onCChange.bind(this)}\n                            />\n                        </div>\n                        <br /><br />\n                        <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\n                        <br /><br />\n                    </form>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" >Test</Button>\n                </Grid>\n                <Grid item xs={3} style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-end'\n                }}>\n                    <Button type=\"sublit\"  variant=\"contained\" color=\"primary\" >\n                        Result\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n        );\n    }\n};","import React, {Component} from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {PROXY_URL} from '../misc/proxyURL';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport './kmeans.css';\r\n\r\nconst colors = [\r\n    'red',\r\n    'green',\r\n    'blue',\r\n    'orange',\r\n    'green',\r\n    'sienna',\r\n    'peachpuff',\r\n    'purple',\r\n    'pink',\r\n    'turquoise'\r\n];\r\n\r\nexport class KMeans extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            k: '2'\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        console.log(this.state.k);\r\n        \r\n        axios({\r\n          method: \"POST\",\r\n          url:PROXY_URL + '/train/kmeans', \r\n          data:  [this.state.k]\r\n        }).then((response)=>{\r\n          console.log(response);\r\n        })\r\n      }\r\n    \r\n    onKChange(event) {\r\n        this.setState({k: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header className='title'\r\n                        size='huge'\r\n                >\r\n                    K-Means\r\n                </Header>\r\n                <Grid style={{ marginTop: '500px' }} container spacing={0}>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'left'\r\n                    }}>\r\n                        <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\r\n                            <div>\r\n                                <TextField\r\n                                    id=\"k\"\r\n                                    label=\"K (Value >= 2)\"\r\n                                    type=\"number\"\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    defaultValue={'2'}\r\n                                    required\r\n                                    value={this.state.k}\r\n                                    onChange={this.onKChange.bind(this)}\r\n                                />\r\n                            </div>\r\n                            <br /><br />\r\n                            <Button type=\"submit\" value=\"Submit\" variant=\"contained\" color=\"primary\">Train</Button>\r\n                            <br /><br />\r\n                        </form>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Test \r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={3} style={{\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'flex-end'\r\n                    }}>\r\n                        <Button style={{ width: '40%' }} variant=\"contained\" color=\"primary\" >\r\n                            Result\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\nimport {List, Button, Icon} from 'semantic-ui-react';\nimport {InlineMath} from 'react-katex';\nimport './gaussians.css';\n\nexport class Gaussians extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            means: this.props.means,\n            covMats: this.props.covMats,\n            toggle: this.props.toggle,\n            deletePair: this.props.deletePair\n        };\n    };\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.toggle !== this.props.toggle) {\n            this.setState(this.props);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"lda__points\">\n                <h2><u>Gaussian Classes</u>:</h2>\n                <div className=\"lda__points-list\">\n                    <List>\n                    {this.state.means.map((meanVec, i) => {\n                        return (\n                            <List.Item key={i}>\n                                <header className='point-row'>\n                                    <span className='point-row__point'>\n                                    (   <InlineMath math='\\mu_X = ' /> &nbsp; {meanVec[0]}, &nbsp;\n                                        <InlineMath math='\\mu_Y = ' /> &nbsp; {meanVec[1]},  &nbsp;\n                                        <InlineMath math='\\sigma_X^2 = ' /> &nbsp; {this.state.covMats[i][0][0]}, &nbsp;\n                                        <InlineMath math='\\sigma_Y^2 = ' /> &nbsp; {this.state.covMats[i][1][1]},  &nbsp;\n                                        <InlineMath math='\\sigma_{XY} = ' /> &nbsp; {this.state.covMats[i][0][1]}\n                                    )\n                                    </span>\n                                    <Button className='point-row__delete'\n                                        onClick={_ => {\n                                            this.state.deletePair(i);\n                                        }\n                                    }>\n                                        <Icon name='close' />\n                                    </Button>\n                                </header>\n                            </List.Item>\n                        );\n                    })}\n                    </List>\n                </div>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport {Form, Input, Button} from 'semantic-ui-react';\nimport {PROXY_URL} from '../misc/proxyURL';\nimport {InlineMath} from 'react-katex';\nimport './addGaussianForm.css';\n\nfunction validNumber(str) {\n    let trimmed = str.trim();\n    return trimmed.length > 0 && isFinite(trimmed);\n};\n\nexport async function getMetadata(means, covarianceMatrices) {\n    const response = await fetch(PROXY_URL + '/lda', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            'means': means,\n            'covarianceMatrices': covarianceMatrices\n        })\n    });\n\n    const metadata = await response.json();\n    return metadata;\n}\n\nexport class AddGaussianForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: {value: '', status: ''}, \n            y: {value: '', status: ''},\n            varX: {value: '', status: ''},\n            varY: {value: '', status: ''},\n            covXY: {value: '', status: ''},\n            onNewInput: this.props.onNewInput,\n            updateMetadata: this.props.updateMetadata,\n            means: this.props.means,\n            covarianceMatrices: this.props.covarianceMatrices\n        };\n    };\n\n    async componentDidUpdate(prevProps) {\n        if (prevProps.means.length !== this.props.means.length) {\n            this.setState({\n                means: this.props.means,\n                covarianceMatrices: this.props.covarianceMatrices\n            });\n\n            const promise = getMetadata(this.props.means, this.props.covarianceMatrices);\n            promise.then(metadata => this.state.updateMetadata(metadata));\n        }\n    };\n\n    render() {\n        return (\n            <div className='lda__form'>\n                <h2><u>Input Gaussian Class</u>:</h2>\n                <Form>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_X' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.x.value}\n                                onChange={e => {\n                                    let newX = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newX.status = '';\n                                    else\n                                        newX.status = 'Not a number!';\n                                    this.setState({x: newX});\n                                }}\n                        />\n                        <span className='lda-form__row__span'>{this.state.x.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\mu_Y' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.y.value}\n                                onChange={e => {\n                                    let newY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newY.status = '';\n                                    else\n                                        newY.status = 'Not a number!';\n                                    this.setState({y: newY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.y.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_X^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varX.value}\n                                onChange={e => {\n                                    let newVarX = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarX.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarX.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarX.status = 'Variance is non-negative!';\n                                    else\n                                        newVarX.status = '';\n                                    this.setState({varX: newVarX});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varX.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_Y^2' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.varY.value}\n                                onChange={e => {\n                                    let newVarY = {value: e.target.value, status: ''};\n                                    if (e.target.value.length === 0)\n                                        newVarY.status = '';\n                                    else if (!validNumber(e.target.value))\n                                        newVarY.status = 'Not a number!';\n                                    else if (validNumber(e.target.value) && e.target.value < 0)\n                                        newVarY.status = 'Variance is non-negative!';\n                                    else\n                                        newVarY.status = '';\n                                    this.setState({varY: newVarY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.varY.status}</span>\n                    </header>\n                    <header className=\"lda-form__row\">\n                        <span class='lda-form__row__sym'>\n                            <InlineMath math='\\sigma_{XY}' />:\n                        </span>\n                        <Input  className=\"lda-form__row__input\"\n                                value={this.state.covXY.value}\n                                onChange={e => {\n                                    let newCovXY = {value: e.target.value, status: ''};\n                                    if (validNumber(e.target.value) || e.target.value.length === 0)\n                                        newCovXY.status = '';\n                                    else\n                                        newCovXY.status = 'Not a number!';\n                                    this.setState({covXY: newCovXY});\n                                }}\n                        />\n                        <span className=\"lda-form__row__span\">{this.state.covXY.status}</span>\n                    </header>\n                    <Button primary\n                            className=\"add-point\"\n                            disabled={!(validNumber(this.state.x.value) && \n                                        validNumber(this.state.y.value) &&\n                                        validNumber(this.state.varX.value) &&\n                                        this.state.varX.value >= 0 &&\n                                        validNumber(this.state.varY.value) &&\n                                        this.state.varY.value >= 0 &&\n                                        validNumber(this.state.covXY.value)\n                                    )}\n                            onClick={async () => {\n                                let newMean = [\n                                    Number(this.state.x.value), \n                                    Number(this.state.y.value)\n                                ]\n                                let newCovMat = [\n                                    [this.state.varX.value, this.state.covXY.value],\n                                    [this.state.covXY.value, this.state.varY.value]\n                                ]\n                                this.state.onNewInput(newMean, newCovMat);\n                                this.setState({\n                                    x: {value: '', status: ''},\n                                    y: {value: '', status: ''},\n                                    varX: {value: '', status: ''},\n                                    varY: {value: '', status: ''},\n                                    covXY: {value: '', status: ''}\n                                });\n                            }\n                    }>\n                        Add Gaussian Class\n                    </Button>\n                </Form>\n            </div>\n        );\n    }\n};","import React, {Component} from 'react';\nimport * as d3 from 'd3';\n\nconst colors = [\n    'red',\n    'green',\n    'blue',\n    'orange',\n    'green',\n    'sienna',\n    'peachpuff',\n    'purple',\n    'pink',\n    'turquoise'\n];\n\nfunction properMinScaling(n) {\n    if (n >= 0)\n        return n * 0.9;\n    else\n        return n * 1.1;\n}\n\nfunction properMaxScaling(n) {\n    if (n >= 0)\n        return n * 1.1;\n    else\n        return n * 0.9;\n}\n\nexport class LDAChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 400,\n            radius: 3,\n            margin: {\n                left: 50,\n                right: 10,\n                top: 20,\n                bottom: 50\n            }\n        };\n\n        this.drawWidth = this.state.width - this.state.margin.left - this.state.margin.right;\n        this.drawHeight = this.state.height - this.state.margin.top - this.state.margin.bottom;\n    };\n\n    componentDidMount() {\n        this.update();\n    }\n\n    componentDidUpdate() {\n        this.update();\n    };\n\n    updateScales() {\n        const allPoints = this.props.points\n            .concat(this.props.line);\n        \n        let xMin = d3.min(allPoints, (d) => properMinScaling(+d.x));\n        let xMax = d3.max(allPoints, (d) => properMaxScaling(+d.x));\n        let yMin = d3.min(allPoints, (d) => properMinScaling(+d.y));\n        let yMax = d3.max(allPoints, (d) => properMaxScaling(+d.y));\n\n        this.xScale = d3.scaleLinear().domain([xMin, xMax]).range([0, this.drawWidth])\n        this.yScale = d3.scaleLinear().domain([yMax, yMin]).range([0, this.drawHeight])\n    }\n    \n    updatePoints() {\n        let circles = d3.select(this.chartArea).selectAll('circle').data(this.props.points);\n\n        circles.enter().append('circle')\n            .merge(circles)\n            .attr('r', (d) => this.state.radius)\n            .attr('fill', (d) => {\n                return colors[d.label % colors.length];\n            })\n            .attr('label', (d) => d.label)\n            .transition().duration(500)\n            .attr('cx', (d) => this.xScale(d.x))\n            .attr('cy', (d) => this.yScale(d.y))\n\n        circles.exit().remove();\n    }\n\n    updateLines() {\n        const allPoints = [this.props.line];\n\n        const line = d3.line()\n            .x((d) => this.xScale(+d.x))\n            .y((d) => this.yScale(+d.y))\n            .curve(d3.curveMonotoneX);\n\n        let ldaLine = d3.select(this.chartArea)\n            .selectAll('path')\n            .data(allPoints);\n        \n        ldaLine.enter().append('path')\n            .merge(ldaLine)\n            .attr('fill', 'none')\n            .attr('stroke', (_, i) => {\n                return 'black';\n            })\n            .attr('stroke-width', 3)\n            .transition().duration(500)\n            .attr('d', (d) => line(d))\n    }\n    \n    updateAxes() {\n        let xAxisFunction = d3.axisBottom()\n            .scale(this.xScale)\n            .ticks(5, 's');\n\n        let yAxisFunction = d3.axisLeft()\n            .scale(this.yScale)\n            .ticks(5, 's');\n\n        d3.select(this.xAxis)\n            .call(xAxisFunction);\n\n        d3.select(this.yAxis)\n            .call(yAxisFunction);\n    }\n    \n    update() {\n        this.updateScales();\n        this.updateAxes();\n        this.updatePoints();\n        this.updateLines();\n    }\n\n    render() {\n        return (\n            <div className=\"lda__chart\">\n                <svg className=\"chart\" width={this.state.width} height={this.state.height}>\n                    <g ref={(node) => { this.chartArea = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`} />\n\n                    {/* Axes */}\n                    <g ref={(node) => { this.xAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.height - this.state.margin.bottom})`}></g>\n                    <g ref={(node) => { this.yAxis = node; }}\n                        transform={`translate(${this.state.margin.left}, ${this.state.margin.top})`}></g>\n                </svg>\n            </div>\n\n        )\n    }\n};","import React, {Component} from 'react';\nimport {Gaussians} from './gaussians'\nimport {AddGaussianForm} from './addGaussianForm';\nimport {LDAChart} from './ldaChart';\nimport { Header } from 'semantic-ui-react';\nimport './lda.css';\n\nexport class LDA extends Component {\n    constructor() {\n        super();\n        this.state = {\n            means: [],\n            covarianceMatrices: [],\n            metadata: {\n                points: [],\n                line: []\n            },\n            toggle: 0\n        };\n    };\n\n    render() {\n        return (\n            <div>\n                <Header className='title'\n                        size='huge'\n                >\n                    Linear Discriminant Analysis\n                </Header>\n                <div className=\"lda\">\n                    <AddGaussianForm \n                        means={this.state.means}\n                        covarianceMatrices={this.state.covarianceMatrices}\n                        onNewInput={\n                            (meanVector, covMat) => this.setState({\n                                means: [...this.state.means, meanVector],\n                                covarianceMatrices: [...this.state.covarianceMatrices, covMat]\n                            })\n                        }\n                        updateMetadata={\n                            newMetadata => this.setState({\n                                metadata: newMetadata,\n                                toggle: (this.state.toggle + 1) % 2\n                            })\n                        }\n                    />\n                    <Gaussians \n                        means={this.state.means}\n                        covMats={this.state.covarianceMatrices}\n                        toggle={this.state.toggle}\n                        deletePair={\n                            i => this.setState({\n                                    means: this.state.means.filter((_, idx) => i !== idx),\n                                    covarianceMatrices: this.state.covarianceMatrices.filter((_, idx) => i !== idx),\n                                    toggle: (this.state.toggle + 1) % 2\n                                })\n                        }\n                    />\n                    <LDAChart \n                        points={this.state.metadata.points}\n                        line={this.state.metadata.line}\n                    />\n                </div>\n            </div>\n        );\n    }\n};","import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport history from './../history/history';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  button: {\n    display: 'block',\n    marginTop: theme.spacing(2),\n    color:\"inherit\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n}));\n\nexport const NavBar = _ => {\n  const classes = useStyles();\n  let history = useHistory();\n  const pushLink = link => {\n    history.push(link);\n  }\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <Typography variant=\"h6\" color=\"inherit\">\n            DWM Mini Project \n          </Typography>\n        </Toolbar>\n        <div>\n          <Button style={{ width: '8%' }} color=\"inherit\" onClick={()=>{pushLink('/')}}>Home</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\" onClick={()=>{pushLink('/lin-reg')}}>Linear</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\" onClick={()=>{pushLink('/k-means')}}>K-Means</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\" onClick={()=>{pushLink('/svm')}}>SVM</Button>\n          <Button style={{ width: '8%' }} color=\"inherit\" onClick={()=>{pushLink('/lda')}}>LDA</Button>\n        </div>\n      </AppBar> \n    </div>      \n  );\n}\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\nimport Button from \"@material-ui/core/Button\";\nimport { PROXY_URL } from '../misc/proxyURL';\nimport './homePage.css';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.uploadFile = this.uploadFile.bind(this);\n    }\n\n    uploadFile(ev) {\n        ev.preventDefault();\n\n        const data = new FormData();\n        data.append('file', this.uploadInput.files[0]);\n\n        fetch(PROXY_URL + '/upload', {\n            method: 'POST',\n            body: data,\n        });\n    }\n\n    render() {\n        return ( <\n            div className = 'home-page' >\n            <\n            Header size = 'huge' >\n            Welcome to the Classical Machine Learning Visualizer!\n            <\n            /Header> <\n            br / >\n            <\n            Header size = 'huge' >\n            Upload the dataset( in csv, json or yaml) on which you would like to visualize the Machine Learning models. <\n            /Header> <\n            br / >\n            <\n            form onSubmit = { this.uploadFile } >\n            <\n            div >\n            <\n            input accept = \".csv, .json, .yml\"\n            single ref = {\n                (ref) => { this.uploadInput = ref; }\n            }\n            type = \"file\" / >\n            <\n            /div> <\n            br / >\n            <\n            div >\n            <\n            Button type = \"submit\"\n            valud = \"Submit\"\n            variant = \"contained\"\n            color = \"primary\" > Submit < /Button> < /\n            div > <\n            /form> < /\n            div >\n        );\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { LinReg } from './components/lin-reg/linReg';\nimport { SVM } from './components/svm/svm';\nimport { KMeans } from './components/kmeans/kmeans';\nimport { LDA } from './components/lda/lda';\nimport { NavBar } from './components/navbar/navbar';\nimport HomePage from './components/home/homePage';\nimport history from './components/history/history';\nimport './App.css';\n\nexport default class App extends Component {\n    render() {\n        return ( <BrowserRouter history={history} >\n            <React.Fragment >\n            <NavBar/>\n            <div className = \"main-content\" >\n            <Switch>\n            <Route path = \"/lin-reg\"\n            component = { LinReg }/>{\" \"} \n            <Route path = \"/svm\"\n            component = { SVM }\n            />{\" \"} \n            <Route path = \"/k-means\"\n            component = { KMeans }\n            />{\" \"} \n            <Route path = \"/lda\"\n            component = { LDA }\n            />{\" \"}\n            <Route path = \"/\"\n            component = { HomePage }\n            />{\" \"}\n            </Switch>{\" \"}\n            </div>{\" \"} \n            </React.Fragment>{\" \"} \n            </BrowserRouter>\n        );\n    }\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'katex/dist/katex.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}